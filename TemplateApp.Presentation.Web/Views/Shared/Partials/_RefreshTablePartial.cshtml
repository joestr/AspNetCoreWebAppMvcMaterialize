@using System.Threading.Tasks.Sources
@model TemplateApp.ViewModels.Partial.RefreshTablePartialViewModel
@{
    Layout = null;
}

<div>
    <div class="row">
        <div class="col s12 m6 l5 xl4 input-field outlined">
            <select
                id="@{ WriteLiteral($"refreshTablePerPageItemCount_{Model.Identifier}"); }"
                onchange="@{ WriteLiteral($"refreshTable_{Model.Identifier}"); }.refresh()">
                <!option value="1" @{ WriteLiteral(Model.PerPageItemCount == 1 ? "selected" : ""); }>1</!option>
                <!option value="2" @{ WriteLiteral(Model.PerPageItemCount == 2 ? "selected" : ""); }>2</!option>
                <!option value="5" @{ WriteLiteral(Model.PerPageItemCount == 5 ? "selected" : ""); }>5</!option>
            </select>
            <label for="@{ WriteLiteral($"refreshTablePerPageItemCount_{Model.Identifier}"); }">Items per page</label>
        </div>
        <div class="col hide-on-med-and-down l2 xl4"></div>
        <div class="col s12 m6 l5 xl4 input-field outlined">
            <i class="material-symbols-outlined prefix">search</i>
            <input
                id="@{ WriteLiteral($"refreshTableSearch_{Model.Identifier}"); }"
                type="search"
                placeholder=" "
                onchange="@{ WriteLiteral($"refreshTable_{Model.Identifier}"); }.refresh()"
                value="@Model.SearchTerm">
            <label for="@{ WriteLiteral($"refreshTableSearch_{Model.Identifier}"); }">Search</label>
        </div>
    </div>
    <div class="row">
        <div class="col s12">
                <table id="@{ WriteLiteral($"refreshTableContent_{Model.Identifier}"); }" class="striped responsive-table">
                    @if (Model.ShowTableHeader && Model.Entries.Count > 0)
                    {
                        <thead>
                        <tr>
                            @foreach (var entry in Model.Entries.First())
                            {
                                <th>
                                    @entry.Key
                                </th>
                            }
                        </tr >
                        </thead>
                    }
                    @foreach (var row in Model.Entries)
                    {
                        <tr>
                            @foreach (var column in row)
                            {
                                <td>
                                    @column.Value
                                </td>
                            }
                        </tr>
                    }
                    @if (Model.ShowTableFooter && Model.Entries.Count > 0)
                    {
                        <tfoot>
                        <tr>
                            @foreach (var entry in Model.Entries.First())
                            {
                                <th>
                                    @entry.Key
                                </th>
                            }
                        </tr >
                        </tfoot>
                    }
                    @if (Model.Count == 0)
                    {
                        <thead>
                        <tr>
                            <th>No rows</th>
                        </tr>
                        </thead>
                    }
                </table>
        </div>
    </div>

    <div id="@{ WriteLiteral($"refreshTableFooter_{Model.Identifier}"); }" class="row">
        <div class="col s12 m6 l6 valign-wrapper">
            @if (Model.IsFilterActive)
            {
                <span>@Model.Count rows (filtered from @Model.CountAll rows)</span>
            }
            else
            {
                <span>@Model.Count rows</span>
            }
        </div>
        <div class="col s12 m6 l6 right-align">
            <ul class="pagination">
                @if (Model.Page == 1 || Model.IsEmpty)
                {
                    <li class="disabled"><a href="javascript:undefined"><i class="material-symbols-outlined">chevron_left</i></a></li>
                }
                else
                {
                    <li class="waves-effect"><a href="javascript:@{ WriteLiteral($"refreshTable_{Model.Identifier}"); }.toPage(@{ WriteLiteral(Model.Page - 1); });"><i class="material-symbols-outlined">chevron_left</i></a></li>
                }
                @for (var pageIndex = 1; pageIndex <= Model.Pages; pageIndex++)
                {
                    @if (pageIndex == Model.Page)
                    {
                        <li class="active"><a href="javascript:@{ WriteLiteral($"refreshTable_{Model.Identifier}"); }.toPage(@pageIndex);">@pageIndex</a></li>
                    }
                    else
                    {
                        <li class="waves-effect"><a href="javascript:@{ WriteLiteral($"refreshTable_{Model.Identifier}"); }.toPage(@pageIndex);">@pageIndex</a></li>
                    }
                }
                @if (Model.Page == Model.Pages || Model.IsEmpty)
                {
                    <li class="disabled"><a href="javascript:undefined"><i class="material-symbols-outlined">chevron_right</i></a></li>
                }
                else
                {
                    <li class="waves-effect"><a href="javascript:@{ WriteLiteral($"refreshTable_{Model.Identifier}"); }.toPage(@{ WriteLiteral(Model.Page + 1); });"><i class="material-symbols-outlined">chevron_right</i></a></li>
                }
            </ul>
        </div>
    </div>
    <script src="~/js/classes/RefreshTable.js"></script>
    <script>
        var @{ WriteLiteral($"refreshTable_{Model.Identifier}"); } = { }; 

        document.addEventListener("DOMContentLoaded", function () {
            let refreshEntriesPath = "@{ WriteLiteral($"{Model.RefreshEntriesUri}"); }";
            let contentElementId = "@{ WriteLiteral($"refreshTableContent_{Model.Identifier}"); }";
            let footerElementId = "@{ WriteLiteral($"refreshTableFooter_{Model.Identifier}"); }";
            let searchInputElementId = "@{ WriteLiteral($"refreshTableSearch_{Model.Identifier}"); }";

            let refreshTablePerPageItemCountElement = document.getElementById("@{ WriteLiteral($"refreshTablePerPageItemCount_{Model.Identifier}"); }");
            let refreshTablePerPageItemCountElementMaterializeSelect = M.FormSelect.init(refreshTablePerPageItemCountElement, {
                // specify options here
            });

            @{ WriteLiteral($"refreshTable_{Model.Identifier}"); } = new RefreshTable("@{ WriteLiteral(Model.Identifier); }", @{ WriteLiteral(Model.Page); }, refreshEntriesPath, contentElementId, footerElementId, searchInputElementId, refreshTablePerPageItemCountElementMaterializeSelect);
        });
    </script>
</div>
